version: "3.6"
services:
  proxy:
    image: traefik:v2.2
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-public-certificates:/certificates
    command:
      - --providers.docker
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode
      - --entrypoints.${STACK_NAME?Variable not set}-web.address=:80
      - --entrypoints.${STACK_NAME?Variable not set}-websecure.address=:443
      - --certificatesresolvers.le.acme.email=${EMAILS_FROM_EMAIL?Variable not set}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --accesslog
      - --log

    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Global redirection: http to https
        - traefik.http.routers.${STACK_NAME?Variable not set}-web-catchall.rule=HostRegexp(`{host:(www\.)?.+}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-web-catchall.entrypoints=${STACK_NAME?Variable not set}-web
        - traefik.http.routers.${STACK_NAME?Variable not set}-web-catchall.middlewares=${STACK_NAME?Variable not set}-wwwtohttps

        # Global redirection: https (www.) to https
        - traefik.http.routers.${STACK_NAME?Variable not set}-wwwsecure-catchall.rule=HostRegexp(`{host:(www\.).+}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-wwwsecure-catchall.entrypoints=${STACK_NAME?Variable not set}-websecure
        - traefik.http.routers.${STACK_NAME?Variable not set}-wwwsecure-catchall.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-wwwsecure-catchall.middlewares=${STACK_NAME?Variable not set}-wwwtohttps

        # Middleware: http(s)://(www.) to  https://
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-wwwtohttps.redirectregex.regex=^https?://(?:www\.)?(.+)
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-wwwtohttps.redirectregex.replacement=https://$${1}
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-wwwtohttps.redirectregex.permanent=true

        # Let's Encrypt
        - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
        - traefik.http.routers.${STACK_NAME?Variable not set}-wwwsecure.tls.domains[0].main=${DOMAIN}
        - traefik.http.routers.${STACK_NAME?Variable not set}-wwwsecure.tls.domains[0].sans=www.${DOMAIN}
        - traefik.http.routers.${STACK_NAME?Variable not set}-wwwsecure.tls.certresolver=le

  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    env_file:
      - .env
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
        - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-pgadmin.loadbalancer.server.port=5050

  queue:
    image: rabbitmq:3
    # Using the below image instead is required to enable the "Broker" tab in the flower UI:
    # image: rabbitmq:3-management
    #
    # You also have to change the flower command

  flower:
    image: mher/flower
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    env_file:
      - .env
    command:
      - "--broker=amqp://guest@queue:5672//"
      # For the "Broker" tab to work in the flower UI, uncomment the following command argument,
      # and change the queue service's image as well
      # - "--broker_api=http://guest:guest@queue:15672/api//"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.rule=Host(`flower.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.rule=Host(`flower.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-flower.loadbalancer.server.port=5555

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:backend-${TAG-latest}"
    env_file:
      - .env
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend.entrypoints=${STACK_NAME?Variable not set}-websecure
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

  celeryworker:
    image: "${DOCKER_IMAGE_CELERYWORKER?Variable not set}:celeryworker-${TAG-latest}"
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST?Variable not set}
    build:
      context: ./backend
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}

  frontend:
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:frontend-${TAG-latest}"
    build:
      context: ./frontend
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-production}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend.entrypoints=${STACK_NAME?Variable not set}-websecure
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=3000

volumes:
  app-db-data:
  traefik-public-certificates:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
